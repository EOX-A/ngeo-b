#!/bin/bash
##############################################################################
# @maintained by: EOX IT Services GmbH
# @project Browse Server
# @version 1.1
# @date 2021-05-10
# @purpose Service script to ingest harvested browse reports.
#          To be placed in /etc/init.d/
##############################################################################
### BEGIN INIT INFO
# Provides: browsewatchd service
# Required-Start: $local_fs $network ngeo
# Required-Stop: $local_fs $network ngeo
# Default-Start: 2 3 5
# Default-Stop: 0 1 4 6
# Short-Description: Service script to ingest harvested browse reports.
# Description: To start, stop, restart browse watching
### END INIT INFO


# Source function library.
. /etc/init.d/functions

SERVICE="browsewatchd"
PIDFILE="/var/run/${SERVICE}.pid"
LOCKFILE="/var/lock/subsys/$SERVICE"
CONSOLE_LOG="/var/www/ngeo/ngeo_browse_server_instance/ngeo_browse_server_instance/logs/${SERVICE}.log"
USER="apache"

COMMAND="runuser -s /bin/bash $USER -c 'ulimit -S -c 0 &>/dev/null ; nohup browsewatch.sh 0<&- &>>$CONSOLE_LOG & echo \$!' > $PIDFILE"

_status() {
    status -p "$PIDFILE" "$SERVICE"
}

start() {
  # check status and write message if something is wrong
  MSG="$( _status )"
  case "$?" in
    0 ) # running
      echo $"$MSG "
      touch "$LOCKFILE"
      return 0
    ;;
    1 | 2 ) # stopped with issues
      echo $"WARNING: $MSG"
    ;;
    3 ) # stopped
    ;;
    * ) # unexpected status
      echo $"ERROR: $MSG"
      return 1
    ;;
  esac
  # regular start-up
  echo -n $"starting $SERVICE: "
  daemon --pidfile="$PIDFILE" "$COMMAND"
  RETVAL="$?"
  echo
  [ "$RETVAL" -eq 0 ] && touch "$LOCKFILE"
  return "$RETVAL"
}

stop() {
  # check status and write message if something is wrong
  MSG="$( _status )"
  case "$?" in
    0 ) # running
    ;;
    1 | 2 ) # stopped with issues
      echo $"WARNING: $MSG "
      [ -f "$LOCKFILE" ] && rm -f "$LOCKFILE"
      [ -f "$PIDFILE" ] && rm -f "$PIDFILE"
      return 0
    ;;
    3 ) # stopped
      echo $"$MSG "
      return 0
    ;;
    * ) # unexpected status
      echo $"ERROR: $MSG"
      return 1
    ;;
  esac
  # regular shut-down
  echo -n $"stopping $SERVICE: "
  # Find group id from process id given in PIDFILE and kill whole group using negative id
  [ -f "$PIDFILE" ] && kill -- -$(ps -o pgid= -p $(cat $PIDFILE) | grep -o '[0-9]*') && success
  RETVAL="$?"
  echo
  [ "$RETVAL" -eq 0 ] && rm -f "$LOCKFILE" "$PIDFILE"
  return "$RETVAL"
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  status)
    _status
  ;;
  restart)
    stop
    start
  ;;
  *)
    echo "Usage: $SERVICE {start|stop|status|restart"
    exit 1
  ;;
esac
exit "$?"
